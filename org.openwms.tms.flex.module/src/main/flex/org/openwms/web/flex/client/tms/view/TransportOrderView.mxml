<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 * Copyright (C) 2014 Heiko Scherrer
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software. If not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" show="onShow();">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="LOAD_TRANSPORT_ORDERS")]
        [ManagedEvent(name="LOAD_TRANSPORT_UNITS")]
        [ManagedEvent(name="LOAD_ALL_LOCATIONS")]
        [ManagedEvent(name="LOAD_ALL_LOCATION_GROUPS")]
    </mx:Metadata>

	<mx:Script>
    	<![CDATA[
    		import mx.events.ListEvent;
    		import mx.collections.ArrayCollection;
    		import mx.controls.Alert;
    		import mx.controls.dataGridClasses.DataGridColumn;
            import mx.managers.PopUpManager;
            import mx.formatters.DateFormatter;
            
            import org.granite.tide.spring.Identity;
            
    		import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.web.flex.client.common.event.LocationGroupEvent;
    		import org.openwms.web.flex.client.common.event.LocationEvent;
    		import org.openwms.web.flex.client.common.event.TransportUnitEvent;
    		import org.openwms.web.flex.client.common.model.CommonModelLocator;
    		import org.openwms.tms.domain.order.TransportOrder;
            import org.openwms.tms.domain.values.TransportOrderState;
            import org.openwms.tms.domain.values.PriorityLevel;
    		import org.openwms.web.flex.client.tms.model.TMSModelLocator;
            import org.openwms.web.flex.client.tms.event.TransportOrderEvent;
    		import org.openwms.web.flex.client.tms.view.dialogs.CreateTransportOrderDialog;
            import org.openwms.web.flex.client.tms.view.dialogs.CancelTransportOrdersDialog;
            import org.openwms.web.flex.client.tms.view.dialogs.RedirectTransportOrderDialog;

            [Inject]
            [Bindable]
            /**
             * Injected Tide identity object.
             */
            public var identity : Identity;
            [Inject]
            [Bindable]
            /**
             * Inject a model to work on.
             */
            public var modelLocator : ModelLocator;            
            [Inject]
            [Bindable]
            /**
             * Inject a model to work on.
             */
            public var commonModelLocator : CommonModelLocator;
    		[Inject]
    		[Bindable]
            /**
             * Inject a TMS model.
             */
            public var tmsModelLocator : TMSModelLocator;
    		[Bindable]
            private var selected : TransportOrder;
            [Bindable]
            private var dateTimeFormatter : DateFormatter;
            
    		private function onShow() : void {
                if (tmsModelLocator.allTransportOrders.length == 0) {
                    dispatchEvent(new TransportOrderEvent(TransportOrderEvent.LOAD_TRANSPORT_ORDERS));
                }
                if (commonModelLocator.allTransportUnits.length == 0) {
                    dispatchEvent(new TransportUnitEvent(TransportUnitEvent.LOAD_TRANSPORT_UNITS));
                }
                if (commonModelLocator.allLocations.length == 0) {
                    dispatchEvent(new LocationEvent(LocationEvent.LOAD_ALL_LOCATIONS));
                }
                if (commonModelLocator.allLocationGroups.length == 0) {
                    dispatchEvent(new LocationGroupEvent(LocationGroupEvent.LOAD_ALL_LOCATION_GROUPS));
                }
                dateTimeFormatter = tmsModelLocator.dateTimeFormatter;
    		}
    		
            private function showCreateTransportOrderDialog():void {
                var pop1:CreateTransportOrderDialog=CreateTransportOrderDialog(PopUpManager.createPopUp(this, CreateTransportOrderDialog, true));
                PopUpManager.centerPopUp(pop1);
            }
            
            private function showCancelTransportOrdersDialog():void {
            	if (transportOrdersLst.selectedIndices.length == 0) {
                    Alert.show("Please select at least one Transport Order to complete");
                    return;             		
            	}
                var pop:CancelTransportOrdersDialog = CancelTransportOrdersDialog(PopUpManager.createPopUp(this, CancelTransportOrdersDialog, true));
                pop.messageText = "Complete Transport Orders";
                pop.items = new ArrayCollection(transportOrdersLst.selectedItems);
                PopUpManager.centerPopUp(pop);
            }

            private function showRedirectTransportOrderDialog():void {
                var pop1:RedirectTransportOrderDialog = RedirectTransportOrderDialog(PopUpManager.createPopUp(this, RedirectTransportOrderDialog, true));
                pop1.items = new ArrayCollection(transportOrdersLst.selectedItems);
                PopUpManager.centerPopUp(pop1);
            }

            private function refresh():void {
                var event:TransportOrderEvent = new TransportOrderEvent(TransportOrderEvent.LOAD_TRANSPORT_ORDERS);
                dispatchEvent(event);
            }
            
            private function formatAsDate(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return tmsModelLocator.dateFormatter.format(item[dg.dataField]);
                }
                return "--";
            }

            private function formatAsString(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return String(item[dg.dataField].toString());
                }
                return "--";
            }

            private function formatBarcode(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return String(item[dg.dataField].barcode);
                }
                return "--";
            }

            private function formatLocationGroup(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return String(item[dg.dataField].name);
                }
                return "--";
            }
            private function formatAsActualLocation(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return String(item[dg.dataField].actualLocation);
                }
                return "--";
            }

            private function onRowClick(event:ListEvent):void {
            	selected = event.currentTarget.selectedItem as TransportOrder;
                targetLocationGroupCB.selectedIndex = commonModelLocator.allLocationGroups.getItemIndex(selected.targetLocationGroup);
                targetLocationCB.selectedIndex = commonModelLocator.allLocations.getItemIndex(selected.targetLocation);
                stateCB.selectedItem = selected.state;
                priorityCB.selectedItem = selected.priority;
                if ([TransportOrderState.FINISHED, TransportOrderState.ONFAILURE, TransportOrderState.CANCELED].indexOf(selected.state) < 0) {
                    redirectTransportOrderBtn.enabled = true;
                } else {
                    redirectTransportOrderBtn.enabled = false;
                }
                if (selected.transportUnit != null) {
                    transportUnitLbl.text = selected.transportUnit.barcode.toString();
                } else {
                    transportUnitLbl.text = "--";
                }
            }
    	]]>
	</mx:Script>
	
	<mx:HBox x="10" y="10" verticalAlign="middle" width="95%" backgroundColor="#F9FBB7">
	    <mx:Label x="10" y="10" text="Transport Orders" fontSize="24"/>
	    <mx:VRule height="10" />
	    <mx:Button id="createTransportOrderBtn" enabled="{identity.ifAllGranted('TMS_create_TO_button')}" buttonMode="true" mouseChildren="false" toolTip="Create a new Transport Order" icon="@Embed(source='/assets/images/TransportOrder--Add.png')" click="showCreateTransportOrderDialog()"/>
        <mx:VRule height="10" />
        <mx:Button id="cancelTransportOrderBtn" enabled="{identity.ifAllGranted('TMS_cancel_TO_button')}" buttonMode="true" mouseChildren="false" toolTip="Complete one or more existing Transport Orders" icon="@Embed(source='/assets/images/TransportOrder--Cancel.png')" click="showCancelTransportOrdersDialog()" />
        <mx:VRule height="10" />
        <mx:Button id="refreshTransportOrdersBtn" buttonMode="true" mouseChildren="false" toolTip="Refresh the list of Transport Orders" icon="@Embed(source='assets/images/icons/refresh.png')" click="refresh()" />
	    <mx:VRule height="10" />
	    <mx:Button id="showTransportOrderHistoryBtn" enabled="{identity.ifAllGranted('TMS_show_TO_history_button')}" buttonMode="true" mouseChildren="false" toolTip="Show history of a Transport Order" icon="@Embed(source='/assets/images/TransportOrder--History.png')" click="showCreateTransportOrderDialog()" />
	    <mx:VRule height="10" />
	    <mx:Button id="redirectTransportOrderBtn" enabled="{identity.ifAllGranted('TMS_redirect_TO_button')}" buttonMode="true" mouseChildren="false" toolTip="Redirect one or more Transport Orders to a new target" icon="@Embed(source='/assets/images/TransportOrder--Redirect.png')" click="showRedirectTransportOrderDialog()"/>
	</mx:HBox>
	<mx:HRule x="10" y="53" width="95%"/>

	<mx:HBox y="63" x="10" width="95%" height="100%">
	<mx:Canvas height="95%" backgroundColor="#F9FBB7">
        <mx:Image x="10" y="10" source="@Embed(source='/assets/images/TransportOrder.png')"/>
		<mx:Label x="34" y="10" text="Transport Order" fontWeight="bold"/>

        <mx:Label x="10" y="36" text="ID"/>
		<mx:Label x="146" y="36" text="{selected.id}" id="idLbl"/>

        <mx:Label x="10" y="62" text="Transport Unit"/>
		<mx:Label x="146" y="62" id="transportUnitLbl"/>

        <mx:Label x="10" y="88" text="State"/>
        <mx:ComboBox x="146" y="86" id="stateCB" dataProvider="{TransportOrderState.constants}"/>

        <mx:Label x="10" y="114" text="Priority"/>
        <mx:ComboBox x="146" y="112" id="priorityCB" dataProvider="{PriorityLevel.constants}"/>

        <mx:Label x="10" y="140" text="Source Location"/>
        <mx:Label x="146" y="140" text="{selected.sourceLocation}" id="sourceLocationLbl"/>

        <mx:Label x="10" y="166" text="Target Location"/>
        <mx:ComboBox x="146" y="164" id="targetLocationCB" dataProvider="{commonModelLocator.allLocations}"/>

        <mx:Label x="10" y="192" text="Target Location Group"/>
        <mx:ComboBox x="146" y="190" id="targetLocationGroupCB" dataProvider="{commonModelLocator.allLocationGroups}"/>

        <mx:Label x="10" y="218" text="Created"/>
        <mx:Label x="146" y="218" text="{dateTimeFormatter.format(selected.creationDate)}" id="creationDateLbl"/>

        <mx:Label x="10" y="244" text="Last Access"/>
        <mx:Label x="146" y="244" text="{dateTimeFormatter.format(selected.dateUpdated)}" id="dateUpdatedLbl"/>

        <mx:Label x="10" y="270" text="Started"/>
        <mx:Label x="146" y="270" text="{dateTimeFormatter.format(selected.startDate)}" id="startDateLbl"/>

        <mx:Label x="10" y="296" text="Finished"/>
		<mx:Label x="146" y="296" text="{dateTimeFormatter.format(selected.endDate)}" id="endDateLbl"/>
	</mx:Canvas>
	<mx:DataGrid id="transportOrdersLst" allowMultipleSelection="true" change="onRowClick(event)" dataProvider="{tmsModelLocator.allTransportOrders}" height="95%" width="100%">
		<mx:columns>
			<mx:DataGridColumn headerText="ID" dataField="id" width="{ModelLocator.WIDTH_ID}" />
            <mx:DataGridColumn headerText="Transport Unit" dataField="transportUnit" width="{CommonModelLocator.WIDTH_BARCODE}" labelFunction="formatBarcode" />
			<mx:DataGridColumn headerText="State" dataField="state" width="{TMSModelLocator.WIDTH_STATE}" labelFunction="formatAsString" />
			<mx:DataGridColumn headerText="Priority" dataField="priority" width="{TMSModelLocator.WIDTH_PRIORITY}" labelFunction="formatAsString" />
			<mx:DataGridColumn headerText="Source Location" dataField="sourceLocation" width="{CommonModelLocator.WIDTH_LOCATION}" labelFunction="formatAsString"/>
            <mx:DataGridColumn headerText="Current Location" dataField="transportUnit" width="{CommonModelLocator.WIDTH_LOCATION}" labelFunction="formatAsActualLocation" />
			<mx:DataGridColumn headerText="Target Location" dataField="targetLocation" width="{CommonModelLocator.WIDTH_LOCATION}" labelFunction="formatAsString" />
			<mx:DataGridColumn headerText="Target Location Group" dataField="targetLocationGroup" width="{CommonModelLocator.WIDTH_LOCATION_GROUP_NAME}" labelFunction="formatLocationGroup" />
			<mx:DataGridColumn headerText="Created" dataField="creationDate" width="{ModelLocator.WIDTH_DATETIME}" labelFunction="formatAsDate"/>
			<mx:DataGridColumn headerText="Started" dataField="startDate" width="{ModelLocator.WIDTH_DATETIME}" labelFunction="formatAsDate"/>
			<mx:DataGridColumn headerText="Finished" dataField="endDate" width="{ModelLocator.WIDTH_DATETIME}" labelFunction="formatAsDate"/>
		</mx:columns>
	</mx:DataGrid>
	</mx:HBox>
</mx:Canvas>
